// Generated by Haxe 3.4.4
(function () { "use strict";
function $extend(from, fields) {
	function Inherit() {} Inherit.prototype = from; var proto = new Inherit();
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var Tile = require("openfl/src/openfl/display/Tile").default;
var Bunny = function() {
	this.speedY = 0;
	this.speedX = 0;
	Tile.call(this,0);
};
Bunny.__super__ = Tile;
Bunny.prototype = $extend(Tile.prototype,{
});
var Sprite = require("openfl/src/openfl/display/Sprite").default;
var Main = function() {
	var _gthis = this;
	Sprite.call(this);
	this.bunnies = [];
	var loader = new Loader();
	loader.contentLoaderInfo.addEventListener(Event.COMPLETE,function(event) {
		_gthis.start(loader.content.bitmapData);
	});
	loader.load(new URLRequest("wabbit_alpha.png"));
};
Main.main = function() {
	var div = window.document.createElement("div");
	div.id = "openfl-content";
	div.style.width = "550px";
	div.style.height = "400px";
	window.document.body.appendChild(div);
	var app = new Application();
	var config = { build : "1", company : "OpenFL", file : "entry.js", fps : 60, name : "OpenFL-JS BunnyMark", orientation : "portrait", packageName : "org.openfl.samples.bunnymark", version : "1.0.0", windows : [{ allowHighDPI : true, alwaysOnTop : false, antialiasing : 1, background : -1, borderless : false, colorDepth : 16, depthBuffer : false, display : 0, element : div, fullscreen : false, hardware : true, height : 400, hidden : false, maximized : false, minimized : false, parameters : { }, resizable : false, stencilBuffer : false, title : "", vsync : false, width : 550, x : 0, y : 0}]};
	app.create(config);
	var result = app.exec();
	var stage = app.window.stage;
	stage.addChild(new Main());
};
Main.__super__ = Sprite;
Main.prototype = $extend(Sprite.prototype,{
	start: function(bitmapData) {
		this.minX = 0;
		this.maxX = this.stage.stageWidth;
		this.minY = 0;
		this.maxY = this.stage.stageHeight;
		this.gravity = 0.5;
		this.tileset = new Tileset(bitmapData);
		this.tileset.addRect(bitmapData.rect);
		this.tilemap = new Tilemap(this.stage.stageWidth,this.stage.stageHeight,this.tileset);
		this.addChild(this.tilemap);
		this.stage.addEventListener(MouseEvent.MOUSE_DOWN,$bind(this,this.stage_onMouseDown));
		this.stage.addEventListener(MouseEvent.MOUSE_UP,$bind(this,this.stage_onMouseUp));
		this.stage.addEventListener(Event.ENTER_FRAME,$bind(this,this.stage_onEnterFrame));
		var _g = 0;
		while(_g < 10) {
			var i = _g++;
			this.addBunny();
		}
	}
	,addBunny: function() {
		var bunny = new Bunny();
		bunny.x = 0;
		bunny.y = 0;
		bunny.speedX = Math.random() * 5;
		bunny.speedY = Math.random() * 5 - 2.5;
		this.bunnies.push(bunny);
		this.tilemap.addTile(bunny);
	}
	,stage_onEnterFrame: function(event) {
		var _g = 0;
		var _g1 = this.bunnies;
		while(_g < _g1.length) {
			var bunny = _g1[_g];
			++_g;
			bunny.x += bunny.speedX;
			bunny.y += bunny.speedY;
			bunny.speedY += this.gravity;
			if(bunny.x > this.maxX) {
				bunny.speedX *= -1;
				bunny.x = this.maxX;
			} else if(bunny.x < this.minX) {
				bunny.speedX *= -1;
				bunny.x = this.minX;
			}
			if(bunny.y > this.maxY) {
				bunny.speedY *= -0.8;
				bunny.y = this.maxY;
				if(Math.random() > 0.5) {
					bunny.speedY -= 3 + Math.random() * 4;
				}
			} else if(bunny.y < this.minY) {
				bunny.speedY = 0;
				bunny.y = this.minY;
			}
		}
		if(this.addingBunnies) {
			var _g2 = 0;
			while(_g2 < 100) {
				var i = _g2++;
				this.addBunny();
			}
		}
	}
	,stage_onMouseDown: function(event) {
		this.addingBunnies = true;
	}
	,stage_onMouseUp: function(event) {
		this.addingBunnies = false;
		console.log(this.bunnies.length + " bunnies");
	}
});
var Application = require("openfl/src/openfl/display/Application").default;
var Loader = require("openfl/src/openfl/display/Loader").default;
var URLRequest = require("openfl/src/openfl/net/URLRequest").default;
var Event = require("openfl/src/openfl/events/Event").default;
var MouseEvent = require("openfl/src/openfl/events/MouseEvent").default;
var Tilemap = require("openfl/src/openfl/display/Tilemap").default;
var Tileset = require("openfl/src/openfl/display/Tileset").default;
var $_, $fid = 0;
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $fid++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = function(){ return f.method.apply(f.scope, arguments); }; f.scope = o; f.method = m; o.hx__closures__[m.__id__] = f; } return f; }
Main.main();
})();
